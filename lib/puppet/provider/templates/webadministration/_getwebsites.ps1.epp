$iis_version = [Double]'<%= Facter.value("iis_version") %>'

Get-WebSite | % {
  $name = $_.Name

  if ($iis_version -gt 7.5) {
    $preloadenabled = [string](Get-ItemProperty -Path "IIS:\Sites\$($name)" -Name 'applicationDefaults.preloadEnabled' -ErrorAction 'Continue').Value
  }

  $SiteEntityPath = "IIS:\\Sites\${name}"
  $SiteEntityPhysicalPath = Get-ItemProperty -Path $SiteEntityPath -Name physicalPath

  if ($SiteEntityPhysicalPath.EndsWith('/')){
    $null = Set-ItemProperty -Path $SiteEntityPath -Name PhysicalPath -Value $SiteEntityPhysicalPath.TrimEnd('/') -Force
  }
  
  $authenticationTypes = @(
    'anonymous',
    'basic',
    'clientCertificateMapping',
    'digest',
    'iisClientCertificateMapping',
    'windows'
  )
  $authenticationTypes | Foreach-Object -Begin { $info = @{} } -Process {
    $p = Get-WebConfiguration -Filter "system.webserver/security/authentication/$($_)Authentication" -PSPath "IIS:\sites\$($name)"
    $info["$($_)"] = $p.enabled
  }
  $authenticationinfo = New-Object -TypeName PSObject -Property $info

  New-Object -TypeName PSObject -Property @{
    name             = [string]$_.Name
    physicalpath     = [string]$_.PhysicalPath
    applicationpool  = [string]$_.ApplicationPool
    hostheader       = [string]$_.HostHeader
    state            = [string]$_.State
    serverautostart  = [string]$_.serverautostart
    enabledprotocols = [string]$_.enabledprotocols
    bindings         = @($_.Bindings.Collection | %{
      New-Object -TypeName PSObject -Property @{
        protocol             = [string]$_.protocol
        bindinginformation   = [string]$_.bindingInformation
        sslflags             = [int]$_.sslFlags
        certificatehash      = [string]$_.certificateHash
        certificatestorename = [string]$_.certificateStoreName
      }
    })
    limits               = New-Object -TypeName PSObject -Property @{
      maxbandwidth       = [int64]$_.limits.maxbandwidth
      maxconnections     = [int64]$_.limits.maxconnections
      connectiontimeout  = [int]$_.limits.connectiontimeout.totalseconds
    }
    authenticationinfo   = $authenticationinfo
    logformat            = [string]$_.LogFile.logFormat
    logpath              = [string]$_.LogFile.directory
    logperiod            = [string]$_.LogFile.period
    logtruncatesize      = [string]$_.LogFile.truncateSize
    loglocaltimerollover = [string]$_.LogFile.localTimeRollover
    logextfileflags      = [string]$_.LogFile.logExtFileFlags
    preloadenabled       = $preloadenabled
  }
} | ConvertTo-Json -Depth 10
